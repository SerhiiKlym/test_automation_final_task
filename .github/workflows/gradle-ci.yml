name: Run Selenium Tests (Gradle)

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  selenium-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: ['chrome', 'firefox']

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '17'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Chrome and Matching ChromeDriver
        if: matrix.browser == 'chrome'
        run: |
          sudo apt update
          sudo apt install -y google-chrome-stable wget unzip curl jq

          CHROME_VERSION=$(google-chrome --version | grep -oP '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "Detected Chrome version: $CHROME_VERSION"

          DRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json" | \
                       jq -r ".versions[] | select(.version | startswith(\"$CHROME_VERSION\")) | .downloads.chromedriver[] | select(.platform == \"linux64\") | .url" | tail -1)

          if [[ -z "$DRIVER_URL" ]]; then
            echo "Error: Could not find a matching ChromeDriver version for Chrome $CHROME_VERSION"
            exit 1
          fi

          echo "Downloading ChromeDriver from: $DRIVER_URL"

          wget -q -O /tmp/chromedriver.zip "$DRIVER_URL"
          unzip /tmp/chromedriver.zip -d /tmp/
          sudo mv /tmp/chromedriver-linux64/chromedriver /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver
          chromedriver --version

      - name: Install Firefox and GeckoDriver
        if: matrix.browser == 'firefox'
        run: |
          sudo apt update

          # Remove existing Firefox installation
          sudo apt remove --purge -y firefox
          sudo apt autoremove -y

          # Install a specific Firefox version (e.g., 120.0)
          FIREFOX_VERSION="120.0"  # Change this to the desired version
          wget "https://ftp.mozilla.org/pub/firefox/releases/$FIREFOX_VERSION/linux-x86_64/en-US/firefox-$FIREFOX_VERSION.tar.bz2"
          tar -xjf "firefox-$FIREFOX_VERSION.tar.bz2"
          sudo mv firefox /opt/firefox
          sudo ln -sf /opt/firefox/firefox /usr/bin/firefox

          # Remove any existing Geckodriver
          sudo rm -f /usr/local/bin/geckodriver

          # Install a compatible Geckodriver version (e.g., 0.34.0)
          GECKODRIVER_VERSION="v0.34.0"
          wget "https://github.com/mozilla/geckodriver/releases/download/$GECKODRIVER_VERSION/geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz"
          tar -xvzf "geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz"
          sudo mv geckodriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/geckodriver

          # Verify installations
          firefox --version
          geckodriver --version

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew
    
      - name: Run Selenium Tests with ${{ matrix.browser }}
        run: ./gradlew test -Dbrowser=${{ matrix.browser }} --no-daemon

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: selenium-test-results-${{ matrix.browser }}
          path: app/build/reports/tests/test/

      - name: Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: selenium-screenshots
          path: app/build/screenshots/